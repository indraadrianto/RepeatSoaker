#!/usr/bin/env python

import argparse
from itertools import groupby
from operator import attrgetter

from BioTK.io import BEDFile
from BioTK.genome import RAMIndex
import pysam

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--repeat-regions", "-r",
            help="A BED file with repetitive regions to be masked.")
    parser.add_argument("--genome", "-g",
            help="A UCSC genome name (e.g., 'hg19')")
    parser.add_argument("bam_file", nargs=1)

    args = parser.parse_args()

    index = RAMIndex()

    from itertools import islice

    with pysam.Samfile(args.bam_file[0], "rb") as bam:
        contigs = dict([(bam.getrname(i), i) 
            for i in range(bam.nreferences)])

        with BEDFile(args.repeat_regions) as h:
            for region in islice(h, 0, 100):
                contig_id = contigs.get(region.contig)
                if contig_id is not None:
                    index.add(contig_id, region.start, region.end)
        index.build()

        for name, alns in groupby(bam, attrgetter("qname")):
            for aln in alns:
                matches = index.search(aln.tid, aln.pos, aln.aend)
                if matches:
                    print(matches)
                    # TODO: take cumulative overlap instead of max
                    n_overlap = max([aln.overlap(s,e) for (s,e,_) in matches])
                    pct_overlap = n_overlap / (aln.aend - aln.pos)
                    print(n_overlap, pct_overlap)

        """
        for tid, alns in itertools.groupby(attrgetter("tid"), bam):
            for (start, end), alns in itertools.groupby(
                    lambda aln: (aln.pos, aln.aend), alns):
        """
            #print(aln.positions)
            #print(aln.rname)
            #print(aln.pnext)
            #print(dir(aln))
            #break
